import type { NativeModule, EmitterSubscription } from 'react-native';
import type { Float, Int32 } from 'react-native/Libraries/Types/CodegenTypes';
import { PermissionStatus, Rationale } from 'react-native-permissions';

/**
 * Permission handler comparable callback
 */
export type Comparable = (status: PermissionStatus) => boolean;

/**
 * Permission handler response
 */
export type Response = Promise<PermissionStatus | boolean | null>;

/**
 * Permission handler
 */
export type PermissionsHandlers = {
  /**
   * Request permission
   * @returns Promise<PermissionStatus | boolean | null>
   */
  RequestPermission: (rationale?: Rationale, compare?: Comparable) => Response;

  /**
   * Check permission
   * @returns Promise<PermissionStatus | boolean | null>
   */
  CheckPermission: (compare?: Comparable) => Response;
};

export enum PitchDetectorErrors {
  BASE,
  LINKING_ERROR,
  PERMISSIONS_ERROR,
}

/**
 * Event emitter subscription
 */
export type Subscription = EmitterSubscription | undefined;

/**
 * Available musical tones.
 * @see `https://en.wikipedia.org/wiki/Musical_tone`
 */
export type Tone =
  | 'C'
  | 'C#'
  | 'D'
  | 'D#'
  | 'E'
  | 'F'
  | 'F#'
  | 'G'
  | 'G#'
  | 'A'
  | 'A#'
  | 'B';

/**
 * Result generated by pitch estimation process.
 */
export type Data = {
  /**
   * Pitch frequency in hertz.
   */
  frequency: Float;
  tone: Tone;
};

/**
 * A callback function called by event emitted from native side.
 */
export type Callback = (data: Data) => void;

/**
 * Available pitch estimation algorithm for Android.
 * @see `https://0110.be/releases/TarsosDSP/TarsosDSP-latest/TarsosDSP-latest-Documentation/`
 */
export type PitchEstimationAndroidAlgorithm =
  | 'AMDF'
  | 'DYNAMIC_WAVELET'
  | 'FFT_PITCH'
  | 'FFT_YIN'
  | 'MPM'
  | 'YIN';

/**
 * Available pitch estimation algorithm for IOS.
 * @see `https://github.com/vadymmarkov/Beethoven#configuration`
 */
export type PitchEstimationIOSAlgorithm =
  | 'BARYCENTRIC'
  | 'HPS'
  | 'JAINS'
  | 'MAX_VALUE'
  | 'QUADRACTIC'
  | 'QUINNS_FIRST'
  | 'QUINNS_SECOND'
  | 'YIN';

export type PitchDetectorAndroidConfig = {
  algorithm?: PitchEstimationAndroidAlgorithm;
  bufferOverLap?: Int32;
  bufferSize?: Int32;
  sampleRate?: Float;
};

export type PitchDetectorIOSConfig = {
  algorithm?: PitchEstimationIOSAlgorithm;
  bufferSize?: Int32;
};

/**
 * Pitch detector configuration.
 */
export type PitchDetectorConfig = {
  android?: PitchDetectorAndroidConfig;
  ios?: PitchDetectorIOSConfig;
};

/**
 * PitchDetector native module interface
 */
export interface NativeModuleImplementation extends NativeModule {
  /**
   * Start audio recording and pitch detection with provided configs
   * @param config
   * @returns Promise<void>
   */
  start: (
    config: PitchDetectorAndroidConfig | PitchDetectorIOSConfig
  ) => Promise<void>;

  /**
   * Stop audio recording and pitch detection
   * @returns Promise<void>
   */
  stop: () => Promise<void>;

  /**
   * Get current status
   * @returns Promise<boolean>
   */
  isRecording: () => Promise<void>;
}
